name: Release

on:
  push:
    tags:
      - "v*"
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CMAKE_GENERATOR: Ninja

jobs:
  package:
    name: Package (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: macos-latest
            compiler: gcc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache build-essential cmake software-properties-common wget gnupg lsb-release
          # Add PGDG repo to get PostgreSQL 17
          sudo install -d -m 0755 /usr/share/keyrings
          curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /usr/share/keyrings/postgresql.gpg
          echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          # Prefer PostgreSQL 17, fallback to 16 then 15
          sudo apt-get install -y postgresql-17 postgresql-server-dev-17 || \
          sudo apt-get install -y postgresql-16 postgresql-server-dev-16 || \
          sudo apt-get install -y postgresql-15 postgresql-server-dev-15

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          brew update
          brew install ninja ccache cmake postgresql@17
          echo "$(brew --prefix ccache)/libexec" >> $GITHUB_PATH

      - name: Locate pg_config (Linux/macOS)
        shell: bash
        run: |
          if command -v pg_config &>/dev/null; then
            echo "PG_CONFIG=$(command -v pg_config)" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            if brew list postgresql@17 &>/dev/null; then
              echo "PG_CONFIG=$(brew --prefix postgresql@17)/bin/pg_config" >> $GITHUB_ENV
            elif brew list postgresql@16 &>/dev/null; then
              echo "PG_CONFIG=$(brew --prefix postgresql@16)/bin/pg_config" >> $GITHUB_ENV
            else
              echo "pg_config not found on macOS" >&2
              exit 1
            fi
          else
            echo "pg_config not found" >&2
            exit 1
          fi
          echo "Using PG_CONFIG=${PG_CONFIG}"

      - name: Configure (Release + IPO/LTO)
        shell: bash
        run: |
          EXTRA_CFG=()
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            EXTRA_CFG+=(-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache)
          fi
          cmake -S . -B build \
            -G "${CMAKE_GENERATOR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DMINNAL_ENABLE_IPO=ON \
            -DPG_CONFIG="${PG_CONFIG}" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            "${EXTRA_CFG[@]}"

      - name: Build
        run: cmake --build build -j

      - name: Install (Linux/macOS)
        shell: bash
        run: sudo cmake --install build

      - name: Test
        run: ctest --test-dir build --output-on-failure

      - name: Package (CPack)
        shell: bash
        run: |
          cmake --build build --target package
          echo "Generated packages in build/:"
          ls -la build | sed -n 's/.*\(tar\.gz\|zip\)$/\0/p' || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: minnal-packages-${{ matrix.os }}
          path: |
            build/*.tar.gz
            build/*.zip
          if-no-files-found: warn

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            build/*.tar.gz
            build/*.zip
